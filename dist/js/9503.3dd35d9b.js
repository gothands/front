"use strict";(self["webpackChunkHandsy_io"]=self["webpackChunkHandsy_io"]||[]).push([[9503],{49503:(i,t,e)=>{e.d(t,{OpenloginAdapter:()=>d,getOpenloginDefaultOptions:()=>c});e(57658),e(21703),e(26699);var n=e(59023),o=e(82482),r=e(31267),s=e(51101),a=e(73148),h=e.n(a);const c=()=>({adapterSettings:{network:n.dr.MAINNET,clientId:"",uxMode:n.$e.POPUP},loginSettings:{}});function l(i,t){var e=Object.keys(i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(i);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(i,t).enumerable}))),e.push.apply(e,n)}return e}function p(i){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?l(Object(e),!0).forEach((function(t){(0,o.Z)(i,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(t){Object.defineProperty(i,t,Object.getOwnPropertyDescriptor(e,t))}))}return i}class d extends r.J5{constructor(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(i),(0,o.Z)(this,"name",r.rW.OPENLOGIN),(0,o.Z)(this,"adapterNamespace",r.yk.MULTICHAIN),(0,o.Z)(this,"type",r.hN.IN_APP),(0,o.Z)(this,"openloginInstance",null),(0,o.Z)(this,"status",r.MP.NOT_READY),(0,o.Z)(this,"currentChainNamespace",r.EN.EIP155),(0,o.Z)(this,"openloginOptions",void 0),(0,o.Z)(this,"loginSettings",{loginProvider:""}),(0,o.Z)(this,"privKeyProvider",null),this.setAdapterSettings(p(p({},i.adapterSettings),{},{chainConfig:i.chainConfig,clientId:i.clientId||"",sessionTime:i.sessionTime,web3AuthNetwork:i.web3AuthNetwork,useCoreKitKey:i.useCoreKitKey})),this.loginSettings=i.loginSettings||{loginProvider:""}}get chainConfigProxy(){return this.chainConfig?p({},this.chainConfig):null}get provider(){var i;return(null===(i=this.privKeyProvider)||void 0===i?void 0:i.provider)||null}set provider(i){throw new Error("Not implemented")}async init(i){if(super.checkInitializationRequirements(),!this.clientId)throw r.Ty.invalidParams("clientId is required before openlogin's initialization");if(!this.openloginOptions)throw r.Ty.invalidParams("openloginOptions is required before openlogin's initialization");let t=!1;if(this.openloginOptions.uxMode===n.$e.REDIRECT||this.openloginOptions.uxMode===n.$e.SESSIONLESS_REDIRECT){const i=(0,n.Gv)();Object.keys(i).length>0&&i._pid&&(t=!0)}this.openloginOptions=p(p({},this.openloginOptions),{},{replaceUrlOnRedirect:t}),this.openloginInstance=new n.ZP(p(p({},this.openloginOptions),{},{clientId:this.clientId,network:this.openloginOptions.network||this.web3AuthNetwork||n.dr.MAINNET})),r.cM.debug("initializing openlogin adapter init"),await this.openloginInstance.init(),this.status=r.MP.READY,this.emit(r.n2.READY,r.rW.OPENLOGIN);try{r.cM.debug("initializing openlogin adapter");const e=this._getFinalPrivKey();e&&(i.autoConnect||t)&&(this.rehydrated=!0,await this.connect())}catch(e){r.cM.error("Failed to connect with cached openlogin provider",e),this.emit("ERRORED",e)}}async connect(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{loginProvider:""};super.checkConnectionRequirements(),this.status=r.MP.CONNECTING,this.emit(r.n2.CONNECTING,p(p({},i),{},{adapter:r.rW.OPENLOGIN}));try{return await this.connectWithProvider(i),this.provider}catch(t){if(r.cM.error("Failed to connect with openlogin provider",t),this.status=r.MP.READY,this.emit(r.n2.ERRORED,t),null!==t&&void 0!==t&&t.message.includes("user closed popup"))throw r.RM.popupClosed();if(t instanceof r.up)throw t;throw r.RM.connectionError("Failed to login with openlogin")}}async disconnect(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");await this.openloginInstance.logout(),i.cleanup?(this.status=r.MP.NOT_READY,this.openloginInstance=null,this.privKeyProvider=null):this.status=r.MP.READY,this.rehydrated=!1,this.emit(r.n2.DISCONNECTED)}async authenticateUser(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet, Please login/connect first");const i=await this.getUserInfo();return{idToken:i.idToken}}async getUserInfo(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");const i=await this.openloginInstance.getUserInfo();return i}setAdapterSettings(i){super.setAdapterSettings(i);const t=c();r.cM.info("setting adapter settings",i),this.openloginOptions=p(p(p({},t.adapterSettings),this.openloginOptions),i),i.web3AuthNetwork&&(this.openloginOptions.network=i.web3AuthNetwork),void 0!==i.useCoreKitKey&&(this.openloginOptions.useCoreKitKey=i.useCoreKitKey)}async addChain(i){var t;let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkAddChainRequirements(e),null===(t=this.privKeyProvider)||void 0===t||t.addChain(i),this.addChainConfig(i)}async switchChain(i){var t;let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkSwitchChainRequirements(i,e),await(null===(t=this.privKeyProvider)||void 0===t?void 0:t.switchChain(i)),this.setAdapterSettings({chainConfig:this.getChainConfig(i.chainId)})}_getFinalPrivKey(){var i;if(!this.openloginInstance)return"";let t=this.openloginInstance.privKey;if(null!==(i=this.openloginOptions)&&void 0!==i&&i.useCoreKitKey){if(!this.openloginInstance.coreKitKey)throw r.RM.coreKitKeyNotFound();t=this.openloginInstance.coreKitKey}return t}async connectWithProvider(){var i;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{loginProvider:""};if(!this.chainConfig)throw r.Ty.invalidParams("chainConfig is required before initialization");if(!this.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");const o=this._getFinalPrivKey();if(!o||null!==(i=t.extraLoginOptions)&&void 0!==i&&i.id_token){var a;if(this.loginSettings.curve||(this.loginSettings.curve=this.currentChainNamespace===r.EN.SOLANA?n.x7.ED25519:n.x7.SECP256K1),!t.loginProvider&&!this.loginSettings.loginProvider)throw r.Ty.invalidParams("loginProvider is required for login");await this.openloginInstance.login(h()(this.loginSettings,t,{extraLoginOptions:p(p({},t.extraLoginOptions||{}),{},{login_hint:t.login_hint||(null===(a=t.extraLoginOptions)||void 0===a?void 0:a.login_hint)})}))}let c=this._getFinalPrivKey();if(c){if(this.currentChainNamespace===r.EN.SOLANA){const{getED25519Key:i}=await e.e(5348).then(e.bind(e,13430));c=i(c).sk.toString("hex")}if(this.currentChainNamespace===r.EN.SOLANA){const{SolanaPrivateKeyProvider:i}=await Promise.all([e.e(5348),e.e(8845)]).then(e.bind(e,18845));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else if(this.currentChainNamespace===r.EN.EIP155){const{EthereumPrivateKeyProvider:i}=await Promise.all([e.e(3041),e.e(1609)]).then(e.bind(e,81609));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else{if(this.currentChainNamespace!==r.EN.OTHER)throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);this.privKeyProvider=new s.FL}await this.privKeyProvider.setupProvider(c),this.status=r.MP.CONNECTED,this.emit(r.n2.CONNECTED,{adapter:r.rW.OPENLOGIN,reconnected:this.rehydrated})}}}}}]);
//# sourceMappingURL=9503.3dd35d9b.js.map