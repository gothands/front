{"version":3,"file":"js/845.1749e940.js","mappings":"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","sources":["webpack://Handsy.io/../src/Layout.ts","webpack://Handsy.io/../src/_assert.ts","webpack://Handsy.io/../src/crypto.ts","webpack://Handsy.io/../src/utils.ts","webpack://Handsy.io/../src/_sha2.ts","webpack://Handsy.io/../src/_u64.ts","webpack://Handsy.io/../src/sha512.ts","webpack://Handsy.io/../../src/abstract/utils.ts","webpack://Handsy.io/../../src/abstract/modular.ts","webpack://Handsy.io/../../src/abstract/curve.ts","webpack://Handsy.io/../../src/abstract/edwards.ts","webpack://Handsy.io/../../src/abstract/montgomery.ts","webpack://Handsy.io/../../src/abstract/hash-to-curve.ts","webpack://Handsy.io/../src/ed25519.ts","webpack://Handsy.io/../src/sha256.ts","webpack://Handsy.io/../src/error.ts","webpack://Handsy.io/../src/struct.ts","webpack://Handsy.io/../src/structs/utilities.ts","webpack://Handsy.io/../src/structs/types.ts","webpack://Handsy.io/../src/structs/coercions.ts","webpack://Handsy.io/../src/sha3.ts","webpack://Handsy.io/../../src/abstract/weierstrass.ts","webpack://Handsy.io/../src/hmac.ts","webpack://Handsy.io/../src/_shortw_utils.ts","webpack://Handsy.io/../src/secp256k1.ts","webpack://Handsy.io/../src/utils/ed25519.ts","webpack://Handsy.io/../src/utils/to-buffer.ts","webpack://Handsy.io/../src/utils/borsh-schema.ts","webpack://Handsy.io/../src/publickey.ts","webpack://Handsy.io/../src/bpf-loader-deprecated.ts","webpack://Handsy.io/../src/transaction/constants.ts","webpack://Handsy.io/../src/transaction/expiry-custom-errors.ts","webpack://Handsy.io/../src/message/account-keys.ts","webpack://Handsy.io/../src/layout.ts","webpack://Handsy.io/../src/utils/shortvec-encoding.ts","webpack://Handsy.io/../src/utils/assert.ts","webpack://Handsy.io/../src/message/compiled-keys.ts","webpack://Handsy.io/../src/message/legacy.ts","webpack://Handsy.io/../src/message/v0.ts","webpack://Handsy.io/../src/message/versioned.ts","webpack://Handsy.io/../src/transaction/legacy.ts","webpack://Handsy.io/../src/transaction/versioned.ts","webpack://Handsy.io/../src/sysvar.ts","webpack://Handsy.io/../src/utils/send-and-confirm-transaction.ts","webpack://Handsy.io/../src/utils/sleep.ts","webpack://Handsy.io/../src/instruction.ts","webpack://Handsy.io/../src/fee-calculator.ts","webpack://Handsy.io/../src/nonce-account.ts","webpack://Handsy.io/../src/utils/bigint.ts","webpack://Handsy.io/../src/programs/system.ts","webpack://Handsy.io/../src/loader.ts","webpack://Handsy.io/../src/bpf-loader.ts","webpack://Handsy.io/../../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","webpack://Handsy.io/../src/errors.ts","webpack://Handsy.io/../src/__forks__/browser/fetch-impl.ts","webpack://Handsy.io/../src/programs/address-lookup-table/state.ts","webpack://Handsy.io/../src/connection.ts","webpack://Handsy.io/../src/keypair.ts","webpack://Handsy.io/../src/programs/address-lookup-table/index.ts","webpack://Handsy.io/../src/programs/compute-budget.ts","webpack://Handsy.io/../src/programs/ed25519.ts","webpack://Handsy.io/../src/utils/secp256k1.ts","webpack://Handsy.io/../src/programs/secp256k1.ts","webpack://Handsy.io/../src/programs/stake.ts","webpack://Handsy.io/../src/programs/vote.ts","webpack://Handsy.io/../src/validator-info.ts","webpack://Handsy.io/../src/vote-account.ts","webpack://Handsy.io/../src/rpc/JrpcClient.ts","webpack://Handsy.io/../src/rpc/solanaRpcMiddlewares.ts","webpack://Handsy.io/../src/providers/injectedProviders/base/baseInjectedProvider.ts","webpack://Handsy.io/../src/providers/injectedProviders/base/providerHandlers.ts","webpack://Handsy.io/../src/providers/injectedProviders/injectedProviderProxy.ts","webpack://Handsy.io/../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","webpack://Handsy.io/../src/providers/injectedProviders/torus/providerHandlers.ts","webpack://Handsy.io/../src/providers/injectedProviders/torus/torusInjectedProvider.ts","webpack://Handsy.io/../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","webpack://Handsy.io/../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","webpack://Handsy.io/./node_modules/base-x/src/index.js","webpack://Handsy.io/./node_modules/bigint-buffer/dist/browser.js","webpack://Handsy.io/./node_modules/borsh/lib/index.js","webpack://Handsy.io/./node_modules/bs58/index.js","webpack://Handsy.io/./node_modules/eventemitter3/index.js","webpack://Handsy.io/./node_modules/jayson/lib/client/browser/index.js","webpack://Handsy.io/./node_modules/jayson/lib/generateRequest.js","webpack://Handsy.io/./node_modules/rpc-websockets/dist/lib/client.js","webpack://Handsy.io/./node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://Handsy.io/./node_modules/uuid/dist/esm-browser/rng.js","webpack://Handsy.io/./node_modules/uuid/dist/esm-browser/regex.js","webpack://Handsy.io/./node_modules/uuid/dist/esm-browser/validate.js","webpack://Handsy.io/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://Handsy.io/./node_modules/uuid/dist/esm-browser/v4.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/inherits.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/toPrimitive.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/toPropertyKey.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/typeof.js","webpack://Handsy.io/./node_modules/@babel/runtime/regenerator/index.js","webpack://Handsy.io/./node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n",null,null,null,null,null,"import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n",null,null,null,null,null,null,null,null,null,null,"'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["require","buffer_1","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","defineProperty","value","encode","writable","decode","ExternalLayout","isCount","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bool","bytes","lengths","includes","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert","crypto","globalThis","u32","arr","Uint32Array","byteLength","createView","DataView","rotr","isLE","padStart","utf8ToBytes","str","TextEncoder","toBytes","data","concatBytes","arrays","every","a","result","pad","set","Hash","clone","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","wrapConstructorWithOpts","hashCons","msg","opts","randomBytes","bytesLength","setBigUint64","view","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","SHA2","padOffset","pos","len","take","subarray","process","dataView","roundClean","digestInto","fill","oview","outLen","state","get","res","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_1n","_2n","u8a","hexes","bytesToHex","hex","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","arrs","r","forEach","equalBytes","b1","b2","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","val","function","boolean","string","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","mod","num","power","modulo","pow2","x","invert","y","u","q","m","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","root","eql","sqr","Q1div2","neg","ONE","g","mul","ZERO","t2","ge","FpSqrt","c1","n2","nv","sub","isNegativeLE","FIELD_FIELDS","validateField","initial","ORDER","MASK","BYTES","BITS","FpPow","f","p","d","FpInvertBatch","nums","lastMultiplied","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","bitLen","redef","sqrtP","freeze","isOdd","lhs","rhs","div","sqrN","addN","subN","mulN","sqrt","invertBatch","cmov","c","fromBytes","FpSqrtEven","elm","hashToPrivateScalar","groupOrder","minLen","wNAF","constTimeNegate","condition","item","negate","W","windows","windowSize","unsafeLadder","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","validateOpts","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","twistedEdwards","curveDef","CURVE","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","CURVE_ORDER","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","toInv","fromAffine","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","normalizeZ","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","normed","lastByte","y2","isXOdd","isLastByteOdd","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","msgs","sign","options","R","verifyOpts","verify","sig","publicKey","SB","fromHex","error","RkA","utils","randomPrivateKey","precompute","ExtendedPoint","montgomeryBits","powPminus2","Gu","montgomery","montgomeryBytes","fieldLen","cswap","swap","x_2","x_3","dummy","assertFieldElement","a24","montgomeryLadder","pointU","x_1","sw","z_2","z_3","t","k_t","AA","BB","DA","CB","dacb","da_cb","z2","encodeUCoordinate","decodeUCoordinate","uEnc","decodeScalar","scalarMult","_scalar","pu","GuBytes","scalarMultBase","getSharedSecret","privateKey","validateDST","dst","os2ip","i2osp","strxor","isBytes","isNum","expand_message_xmd","DST","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","pseudo_random_bytes","expand_message_xof","dkLen","hash_to_field","expand","_DST","log2p","L","len_in_bytes","prb","elm_offset","tv","isogenyMap","COEFF","xNum","xDen","yNum","yDen","createHasher","def","hashToCurve","u0","u1","encodeToCurve","encodeDST","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","x2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","ELL2_C2","ELL2_C3","ELL2_C4","ELL2_J","map_to_curve_elligator2_curve25519","tv1","xd","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","y1","x2n","y21","y22","gx2","e2","e3","xn","e4","xMn","xMd","yMn","yMd","ELL2_C1_EDWARDS","map_to_curve_elligator2_edwards25519","yn","yd","htf","scalars","assertRstPoint","RistrettoPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","MAX_255B","bytes255ToNumberLE","calcElligatorRistrettoMap","r0","Ns","Ns_D_is_sq","s_","Nt","s2","W0","W1","W2","W3","ep","ap","r1","R1","r2","R2","emsg","u2","u1_2","u2_2","Dx","Dy","u2sq","invsqrt","D1","D2","zInv","_x","_y","one","two","Chi","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","sigma1","sigma0","SHA224","sha256","StructError","failure","failures","cached","rest","path","join","super","this","_cached","isIterable","isObject","Symbol","iterator","print","JSON","stringify","shiftIterator","input","done","next","toFailure","struct","branch","refinement","toFailures","run","coerce","coercer","schema","valid","validator","ts","Set","refiner","Struct","props","is","validate","tuples","tuple","define","any","Element","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","keys","Structs","first","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","posOut","state32","keccak","finish","writeInto","bufferOut","xofInto","xof","keccak_256","genShake","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","b2n","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","isCompressed","tail","weierstrassEquation","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","_bits","ProjectivePoint","hmac","bits2int","bits2int_modN","lowS","weierstrass","compressedLen","uncompressedLen","isValidFieldElement","invN","cat","isYOdd","isHeadOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","rand","fromPrivateKey","isProbPub","privateA","publicB","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","drbg","signature","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","SWUFpSqrtRatio","o","c2","c3","c4","c5","c6","c7","sqrtRatio","tv5","tv4","isQR","tvv5","mapToCurveSimpleSWU","tv6","HMAC","_key","iHash","oHash","buf","getPrototypeOf","getHash","createCurve","defHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","a2","POW_2_128","fe","TAGGED_HASH_PREFIXES","taggedHash","messages","tagP","tagH","charCodeAt","pointToBytes","numTo32b","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","k_","rx","schnorrVerify","pub","isoMap","mapSWU","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","serialize","SOLANA_SCHEMA","static","deserialize","deserializeUnchecked","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","pubkey","default","kind","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","authorized","lockup","voteInit","voteAuthorizeWithSeedArgs","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","encodeDecode","bigInt","blob","bigIntLayout","toBigIntLE","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","instructionData","newAuthorizedPubkey","CHUNK_SIZE","Loader","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","SendTransactionError","logs","SolanaJSONRPCError","code","customMessage","fetch","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","slot","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","taper","terminal","GetRecentPrioritizationFeesResult","epoch","effectiveSlot","amount","postBalance","commission","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","PerfSampleResult","previousBlockhash","parentSlot","rewards","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","authority","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","ecdsaSign","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","request","response","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","_ref3","addNewChainConfig","switchSolanaChain","createAccountMiddleware","_ref4","updatePrivatekey","BaseInjectedProvider","BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","WalletLoginError","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","ethErrors","sigData","display","_req$params","_req$params2","txRes","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","getTorusHandlers","txMessage","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","_objectSpread$1","addChain","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","on","configure","setupProvider","getProviderEngineProxy","keyPairGenerator","keyPair","signedMsg","nacl","_providerEngineProxy","encoding","_req$params6","txns","tx","SolanaPrivateKeyProvider","_objectSpread","getEd25519Key","getED25519Key","sk","getChainSwitchMiddleware","getAccountMiddleware","existingKey","getChainConfig","health","chainSwitchHandlers","switchChain","chainSwitchMiddleware","accountHandlers","updateAccount","providerFactory","_Buffer","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","log","iFACTOR","isBuffer","zeroes","pbegin","pend","b58","carry","it1","it2","repeat","decodeUnsafe","psz","b256","it3","it4","vch","allocUnsafe","module","reversed","toBigIntBE","width","toBufferBE","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","target","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","ResolvedTextDecoder","TextDecoder","textDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","obj","borshSerialize","structSchema","Writer","deserializeField","reader","option","deserializeStruct","classType","borshDeserialize","fieldValue","Reader","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","callback","self","isBatch","isRaw","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","NewTarget","construct","sham","Proxy","valueOf","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","generate_request_id","_a$autoconnect","autoconnect","_a$reconnect","reconnect","_a$reconnect_interval","reconnect_interval","_a$max_reconnects","max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","socket","timeout","ws_opts","_this2","reject","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","login","_listMethods","_callee2","_context2","listMethods","_this3","_subscribe","_callee3","_context3","subscribe","_x2","_unsubscribe","_callee4","_context4","unsubscribe","_x3","close","_this4","clearTimeout","addEventListener","ArrayBuffer","notification","then","reason","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","_default","getRandomValues","rnds8","rng","msCrypto","REGEX","byteToHex","toLowerCase","v4","rnds","random","_assertThisInitialized","ReferenceError","asyncGeneratorStep","_throw","arg","info","_asyncToGenerator","_classCallCheck","Constructor","toPropertyKey","_defineProperties","descriptor","configurable","_createClass","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","_inherits","subClass","superClass","_typeof","assertThisInitialized","_possibleConstructorReturn","_regeneratorRuntime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","_sent","dispatchException","methodName","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","awrap","iter","pop","skipTempReset","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","_setPrototypeOf","_toPrimitive","hint","prim","toPrimitive","_toPropertyKey","runtime","regeneratorRuntime","accidentalStrictMode","Function","ToDictionary","stringToCodePoints","codePointsToString","code_points","cp","fromCharCode","end_of_stream","Stream","tokens","endOfStream","read","prepend","token","decoderError","opt_code_point","Decoder","Encoder","stream","bite","code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","UTF8Encoder","temp","input_stream","opt_string"],"sourceRoot":""}