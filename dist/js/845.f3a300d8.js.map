{"version":3,"file":"js/845.f3a300d8.js","mappings":"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","sources":["webpack://Handsy.io/./node_modules/core-js/modules/es.array.flat.js","webpack://Handsy.io/./node_modules/core-js/modules/es.array.unscopables.flat.js","webpack://Handsy.io/../src/Layout.ts","webpack://Handsy.io/../src/_assert.ts","webpack://Handsy.io/../src/crypto.ts","webpack://Handsy.io/../src/utils.ts","webpack://Handsy.io/../src/_sha2.ts","webpack://Handsy.io/../src/_u64.ts","webpack://Handsy.io/../src/sha512.ts","webpack://Handsy.io/../../src/abstract/utils.ts","webpack://Handsy.io/../../src/abstract/modular.ts","webpack://Handsy.io/../../src/abstract/curve.ts","webpack://Handsy.io/../../src/abstract/edwards.ts","webpack://Handsy.io/../../src/abstract/montgomery.ts","webpack://Handsy.io/../../src/abstract/hash-to-curve.ts","webpack://Handsy.io/../src/ed25519.ts","webpack://Handsy.io/../src/sha256.ts","webpack://Handsy.io/../src/error.ts","webpack://Handsy.io/../src/struct.ts","webpack://Handsy.io/../src/structs/utilities.ts","webpack://Handsy.io/../src/structs/types.ts","webpack://Handsy.io/../src/structs/coercions.ts","webpack://Handsy.io/../src/sha3.ts","webpack://Handsy.io/../../src/abstract/weierstrass.ts","webpack://Handsy.io/../src/hmac.ts","webpack://Handsy.io/../src/_shortw_utils.ts","webpack://Handsy.io/../src/secp256k1.ts","webpack://Handsy.io/../src/utils/ed25519.ts","webpack://Handsy.io/../src/utils/to-buffer.ts","webpack://Handsy.io/../src/utils/borsh-schema.ts","webpack://Handsy.io/../src/publickey.ts","webpack://Handsy.io/../src/bpf-loader-deprecated.ts","webpack://Handsy.io/../src/transaction/constants.ts","webpack://Handsy.io/../src/transaction/expiry-custom-errors.ts","webpack://Handsy.io/../src/message/account-keys.ts","webpack://Handsy.io/../src/layout.ts","webpack://Handsy.io/../src/utils/shortvec-encoding.ts","webpack://Handsy.io/../src/utils/assert.ts","webpack://Handsy.io/../src/message/compiled-keys.ts","webpack://Handsy.io/../src/message/legacy.ts","webpack://Handsy.io/../src/message/v0.ts","webpack://Handsy.io/../src/message/versioned.ts","webpack://Handsy.io/../src/transaction/legacy.ts","webpack://Handsy.io/../src/transaction/versioned.ts","webpack://Handsy.io/../src/sysvar.ts","webpack://Handsy.io/../src/utils/send-and-confirm-transaction.ts","webpack://Handsy.io/../src/utils/sleep.ts","webpack://Handsy.io/../src/instruction.ts","webpack://Handsy.io/../src/fee-calculator.ts","webpack://Handsy.io/../src/nonce-account.ts","webpack://Handsy.io/../src/utils/bigint.ts","webpack://Handsy.io/../src/programs/system.ts","webpack://Handsy.io/../src/loader.ts","webpack://Handsy.io/../src/bpf-loader.ts","webpack://Handsy.io/../../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","webpack://Handsy.io/../src/errors.ts","webpack://Handsy.io/../src/__forks__/browser/fetch-impl.ts","webpack://Handsy.io/../src/programs/address-lookup-table/state.ts","webpack://Handsy.io/../src/connection.ts","webpack://Handsy.io/../src/keypair.ts","webpack://Handsy.io/../src/programs/address-lookup-table/index.ts","webpack://Handsy.io/../src/programs/compute-budget.ts","webpack://Handsy.io/../src/programs/ed25519.ts","webpack://Handsy.io/../src/utils/secp256k1.ts","webpack://Handsy.io/../src/programs/secp256k1.ts","webpack://Handsy.io/../src/programs/stake.ts","webpack://Handsy.io/../src/programs/vote.ts","webpack://Handsy.io/../src/validator-info.ts","webpack://Handsy.io/../src/vote-account.ts","webpack://Handsy.io/../src/rpc/JrpcClient.ts","webpack://Handsy.io/../src/rpc/solanaRpcMiddlewares.ts","webpack://Handsy.io/../src/providers/injectedProviders/base/baseInjectedProvider.ts","webpack://Handsy.io/../src/providers/injectedProviders/base/providerHandlers.ts","webpack://Handsy.io/../src/providers/injectedProviders/injectedProviderProxy.ts","webpack://Handsy.io/../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","webpack://Handsy.io/../src/providers/injectedProviders/torus/providerHandlers.ts","webpack://Handsy.io/../src/providers/injectedProviders/torus/torusInjectedProvider.ts","webpack://Handsy.io/../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","webpack://Handsy.io/../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","webpack://Handsy.io/./node_modules/borsh/lib/index.js","webpack://Handsy.io/./node_modules/jayson/lib/client/browser/index.js","webpack://Handsy.io/./node_modules/jayson/lib/generateRequest.js","webpack://Handsy.io/./node_modules/rpc-websockets/dist/lib/client.js","webpack://Handsy.io/./node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/inherits.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/toPrimitive.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/toPropertyKey.js","webpack://Handsy.io/./node_modules/@babel/runtime/helpers/typeof.js","webpack://Handsy.io/./node_modules/@babel/runtime/regenerator/index.js","webpack://Handsy.io/./node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = lengthOfArrayLike(O);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));\n    return A;\n  }\n});\n","// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n",null,null,null,null,null,"import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n",null,null,null,null,null,null,null,null,null,null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["$","flattenIntoArray","toObject","lengthOfArrayLike","toIntegerOrInfinity","arraySpeciesCreate","target","proto","flat","depthArg","arguments","length","undefined","O","this","sourceLen","A","addToUnscopables","require","buffer_1","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","defineProperty","value","encode","writable","decode","ExternalLayout","isCount","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bool","bytes","lengths","includes","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert","crypto","globalThis","u32","arr","Uint32Array","byteLength","createView","DataView","rotr","isLE","padStart","utf8ToBytes","str","TextEncoder","toBytes","data","concatBytes","arrays","every","a","result","pad","set","Hash","clone","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","wrapConstructorWithOpts","hashCons","msg","opts","randomBytes","bytesLength","setBigUint64","view","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","SHA2","padOffset","pos","len","take","subarray","process","dataView","roundClean","digestInto","fill","oview","outLen","state","get","res","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_1n","_2n","u8a","hexes","bytesToHex","hex","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","arrs","r","forEach","equalBytes","b1","b2","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","val","function","boolean","string","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","mod","num","power","modulo","pow2","x","invert","y","u","q","m","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","root","eql","sqr","Q1div2","neg","ONE","g","mul","ZERO","t2","ge","FpSqrt","c1","n2","nv","sub","isNegativeLE","FIELD_FIELDS","validateField","initial","ORDER","MASK","BYTES","BITS","FpPow","f","p","d","FpInvertBatch","nums","lastMultiplied","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","bitLen","redef","sqrtP","freeze","isOdd","lhs","rhs","div","sqrN","addN","subN","mulN","sqrt","invertBatch","cmov","c","fromBytes","FpSqrtEven","elm","hashToPrivateScalar","groupOrder","minLen","wNAF","constTimeNegate","condition","item","negate","W","windows","windowSize","unsafeLadder","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","validateOpts","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","twistedEdwards","curveDef","CURVE","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","CURVE_ORDER","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","toInv","fromAffine","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","normalizeZ","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","normed","lastByte","y2","isXOdd","isLastByteOdd","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","msgs","sign","options","R","verifyOpts","verify","sig","publicKey","SB","fromHex","error","RkA","utils","randomPrivateKey","precompute","ExtendedPoint","montgomeryBits","powPminus2","Gu","montgomery","montgomeryBytes","fieldLen","cswap","swap","x_2","x_3","dummy","assertFieldElement","a24","montgomeryLadder","pointU","x_1","sw","z_2","z_3","t","k_t","AA","BB","DA","CB","dacb","da_cb","z2","encodeUCoordinate","decodeUCoordinate","uEnc","decodeScalar","scalarMult","_scalar","pu","GuBytes","scalarMultBase","getSharedSecret","privateKey","validateDST","dst","os2ip","i2osp","strxor","isBytes","isNum","expand_message_xmd","DST","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","pseudo_random_bytes","expand_message_xof","dkLen","hash_to_field","expand","_DST","log2p","L","len_in_bytes","prb","elm_offset","tv","isogenyMap","COEFF","xNum","xDen","yNum","yDen","createHasher","def","hashToCurve","u0","u1","encodeToCurve","encodeDST","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","x2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","ELL2_C2","ELL2_C3","ELL2_C4","ELL2_J","map_to_curve_elligator2_curve25519","tv1","xd","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","y1","x2n","y21","y22","gx2","e2","e3","xn","e4","xMn","xMd","yMn","yMd","ELL2_C1_EDWARDS","map_to_curve_elligator2_edwards25519","yn","yd","htf","scalars","assertRstPoint","RistrettoPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","MAX_255B","bytes255ToNumberLE","calcElligatorRistrettoMap","r0","Ns","Ns_D_is_sq","s_","Nt","s2","W0","W1","W2","W3","ep","ap","r1","R1","r2","R2","emsg","u2","u1_2","u2_2","Dx","Dy","u2sq","invsqrt","D1","D2","zInv","_x","_y","one","two","Chi","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","sigma1","sigma0","SHA224","sha256","StructError","failure","failures","cached","rest","path","join","super","_cached","isIterable","isObject","Symbol","iterator","print","JSON","stringify","shiftIterator","input","done","next","toFailure","struct","branch","refinement","toFailures","run","coerce","coercer","schema","valid","validator","ts","Set","refiner","Struct","props","is","validate","tuples","tuple","define","any","Element","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","keys","Structs","first","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","posOut","state32","keccak","finish","writeInto","bufferOut","xofInto","xof","keccak_256","genShake","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","b2n","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","isCompressed","tail","weierstrassEquation","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","_bits","ProjectivePoint","hmac","bits2int","bits2int_modN","lowS","weierstrass","compressedLen","uncompressedLen","isValidFieldElement","invN","cat","isYOdd","isHeadOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","rand","fromPrivateKey","isProbPub","privateA","publicB","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","drbg","signature","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","SWUFpSqrtRatio","o","c2","c3","c4","c5","c6","c7","sqrtRatio","tv5","tv4","isQR","tvv5","mapToCurveSimpleSWU","tv6","HMAC","_key","iHash","oHash","buf","getPrototypeOf","getHash","createCurve","defHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","a2","POW_2_128","fe","TAGGED_HASH_PREFIXES","taggedHash","messages","tagP","tagH","charCodeAt","pointToBytes","numTo32b","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","k_","rx","schnorrVerify","pub","isoMap","mapSWU","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","serialize","SOLANA_SCHEMA","static","deserialize","deserializeUnchecked","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","pubkey","default","kind","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","authorized","lockup","voteInit","voteAuthorizeWithSeedArgs","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","encodeDecode","bigInt","blob","bigIntLayout","toBigIntLE","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","instructionData","newAuthorizedPubkey","CHUNK_SIZE","Loader","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","SendTransactionError","logs","SolanaJSONRPCError","code","customMessage","fetch","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","slot","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","taper","terminal","GetRecentPrioritizationFeesResult","epoch","effectiveSlot","amount","postBalance","commission","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","PerfSampleResult","previousBlockhash","parentSlot","rewards","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","authority","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","ecdsaSign","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","request","response","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","_ref3","addNewChainConfig","switchSolanaChain","createAccountMiddleware","_ref4","updatePrivatekey","BaseInjectedProvider","BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","WalletLoginError","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","ethErrors","sigData","display","_req$params","_req$params2","txRes","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","getTorusHandlers","txMessage","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","_objectSpread$1","addChain","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","on","configure","setupProvider","getProviderEngineProxy","keyPairGenerator","keyPair","signedMsg","nacl","_providerEngineProxy","encoding","_req$params6","txns","tx","SolanaPrivateKeyProvider","_objectSpread","getEd25519Key","getED25519Key","sk","getChainSwitchMiddleware","getAccountMiddleware","existingKey","getChainConfig","health","chainSwitchHandlers","switchChain","chainSwitchMiddleware","accountHandlers","updateAccount","providerFactory","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","ResolvedTextDecoder","TextDecoder","textDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","charAt","toUpperCase","serializeField","fieldType","writer","serializeStruct","obj","borshSerialize","structSchema","Writer","deserializeField","reader","option","deserializeStruct","classType","borshDeserialize","fieldValue","Reader","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","module","callback","self","isBatch","isRaw","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","NewTarget","construct","sham","Proxy","valueOf","__rest","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","generate_request_id","_a$autoconnect","autoconnect","_a$reconnect","reconnect","_a$reconnect_interval","reconnect_interval","_a$max_reconnects","max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","socket","timeout","ws_opts","_this2","reject","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","login","_listMethods","_callee2","_context2","listMethods","_this3","_subscribe","_callee3","event","_context3","subscribe","_x2","_unsubscribe","_callee4","_context4","unsubscribe","_x3","close","_this4","clearTimeout","addEventListener","ArrayBuffer","notification","listeners","then","reason","EventEmitter","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","listener","_default","_assertThisInitialized","ReferenceError","asyncGeneratorStep","_throw","arg","info","_asyncToGenerator","_classCallCheck","Constructor","toPropertyKey","_defineProperties","descriptor","configurable","_createClass","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","__proto__","_inherits","subClass","superClass","_typeof","assertThisInitialized","_possibleConstructorReturn","_regeneratorRuntime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","_sent","dispatchException","methodName","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","awrap","iter","pop","skipTempReset","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","_setPrototypeOf","_toPrimitive","hint","prim","toPrimitive","_toPropertyKey","runtime","regeneratorRuntime","accidentalStrictMode","Function","ToDictionary","stringToCodePoints","codePointsToString","code_points","cp","fromCharCode","end_of_stream","Stream","tokens","endOfStream","read","prepend","token","decoderError","opt_code_point","Decoder","Encoder","stream","bite","code_point","DEFAULT_ENCODING","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","UTF8Encoder","temp","input_stream","opt_string"],"sourceRoot":""}